/// <reference path="./node_modules/sortablejs" />
import { Directive, ElementRef, HostListener, Input } from '@angular/core';

//import Sortable from 'npm:sortablejs';

declare var Sortable;

const ngSortableVersion : string = '0.4.0';
const ngSortableConfig : any = {};
var expando = 'Sortable:ng2Ssortable';

function extend(extendee, extender) {
  var extended = extendee || {};
  for(var prop in extender) {
    extended[prop] =  extendee[prop] || extender[prop];
  }
  return extended;
}

@Directive({
  selector: '[ng2Sortable]'
})
export class Ng2Sortable {
  private el: HTMLElement;
  private ngSortable;

  constructor(el: ElementRef, Sortable) {
          var removed;
          var nextSibling;
					this.el = el.nativeElement;
				//	var	options = angular.extend(this.ngSortable || {}, ngSortableConfig);
          var options = extend(this.ngSortable, ngSortableConfig);
				  var getSource = this.getSourceFactory(el, this);
				  var sortable;
				  var watchers = [];

					el[expando] = getSource;

					function _emitEvent(/**Event*/evt, /*Mixed*/item?) {
						var name = 'on' + evt.type.charAt(0).toUpperCase() + evt.type.substr(1);
						var source = getSource();

						/* jshint expr:true */
						options[name] && options[name]({
							model: item || source[evt.newIndex],
							models: source,
							oldIndex: evt.oldIndex,
							newIndex: evt.newIndex
						});
					}


					function _sync(/**Event*/evt) {
						var items = getSource();

						if (!items) {
							// Without ng-repeat
							return;
						}

						var oldIndex = evt.oldIndex;
						var newIndex = evt.newIndex;

						if (el !== evt.from) {
							var prevItems = evt.from[expando]();

							removed = prevItems[oldIndex];

							if (evt.clone) {
								// removed = angular.copy(removed);
                                // removed = Object.assign({}, removed);
								removed = (JSON.parse(JSON.stringify(removed)));
								prevItems.splice(Sortable.utils.index(evt.clone), 0, prevItems.splice(oldIndex, 1)[0]);
								evt.from.removeChild(evt.clone);
							}
							else {
								prevItems.splice(oldIndex, 1);
							}

							items.splice(newIndex, 0, removed);

							evt.from.insertBefore(evt.item, nextSibling); // revert element
						}
						else {
							items.splice(newIndex, 0, items.splice(oldIndex, 1)[0]);
						}

						this.$apply();
					}


					sortable = Sortable.create(el, Object.keys(options).reduce(function (opts, name) {
						opts[name] = opts[name] || options[name];
						return opts;
					}, {
						onStart: function (/**Event*/evt) {
						nextSibling = evt.item.nextSibling;
							_emitEvent(evt);
							this.$apply();
						},
						onEnd: function (/**Event*/evt) {
							_emitEvent(evt, removed);
							this.$apply();
						},
						onAdd: function (/**Event*/evt) {
							_sync(evt);
							_emitEvent(evt, removed);
							this.$apply();
						},
						onUpdate: function (/**Event*/evt) {
							_sync(evt);
							_emitEvent(evt);
						},
						onRemove: function (/**Event*/evt) {
							_emitEvent(evt, removed);
						},
						onSort: function (/**Event*/evt) {
							_emitEvent(evt);
						},
						onDestroy: function(/**Event */evt) {
							_emitEvent(evt);
						}
					}));

                    @HostListener('destroy') onDestroy() {
						// angular.forEach(watchers, function (/** Function */unwatch) {
						// 	unwatch();
						// });

						sortable.destroy();

						el[expando] = null;
						el = null;
						watchers = null;
						sortable = null;
						nextSibling = null;
					}

					
					[	'sort', 'disabled', 'draggable', 'handle', 'animation', 'group', 'ghostClass', 'filter',
						'onStart', 'onEnd', 'onAdd', 'onUpdate', 'onRemove', 'onSort'
					].forEach( function (name) {
						watchers.push(this.$watch('ngSortable.' + name, function (value) {
							if (value !== void 0) {
								options[name] = value;

								if (!/^on[A-Z]/.test(name)) {
									sortable.option(name, value);
								}
							}
						}));
					});
				} 

				getSourceFactory = function (el, scope) {
					var ngRepeat = [].filter.call(el.childNodes, function (node) {
						return (
								(node.nodeType === 8) &&
								(node.nodeValue.indexOf('ngRepeat:') !== -1)
							);
					})[0];

					if (!ngRepeat) {
						// Without ng-repeat
						return function () {
							return null;
						};
					}

					// tests: http://jsbin.com/kosubutilo/1/edit?js,output
					ngRepeat = ngRepeat.nodeValue.match(/ngRepeat:\s*(?:\(.*?,\s*)?([^\s)]+)[\s)]+in\s+([^\s|]+)/);

					var itemsExpr = JSON.parse(ngRepeat[2]);

					return function () {
						return itemsExpr(scope.$parent) || [];
					};
				};

}
